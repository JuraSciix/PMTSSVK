<?php

require "vendor/autoload.php";
require "functions.php";

use DigitalStar\vk_api\vk_api;
use DigitalStar\vk_api\VkApiException;

/** –¢–æ–∫–µ–Ω—ã –æ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü. –ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º '-t' —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é. */
const ACCESS_TOKENS = [];

/** –í–µ—Ä—Å–∏—è VK API. */
const VERSION = "6.999";

/**
 * –¢–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞.
 *
 * {year} - —Ç–µ–∫—É—â–∏–π –≥–æ–¥.
 * {pm} - –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ–º–∏–ª–ª–µ.
 */
const STATUS_UPDATE_TEXT = "üéâ {year} –ø—Ä–æ—à–µ–ª –Ω–∞ {pm}‚Ä∞!";

// === ENTRY POINT ===

global $debugMode;

$opts = getopt("dct:");
$debugMode = isset($opts['d']);

if (isset($opts['c'])) {
    console();
    return;
}
$rawTokens = ACCESS_TOKENS;
if (isset($opts['t'])) {
    $rawTokens = $opts['t'];
}
status($rawTokens);

// === EXIT POINT ===

function console() {
    $stdin = fopen('php://stdin', 'r');
    info("–ö–æ–Ω—Å–æ–ª—å–Ω—ã–π —Ä–µ–∂–∏–º –∑–∞–ø—É—â–µ–Ω. –ú–∏–Ω–∏-–∏–Ω—Å—Ç—Ä—É–∫—Ç–∞–∂:");
    info("- –í—ã –≤–≤–æ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∏ –ø–æ–ª—É—á–∞–µ—Ç–µ –¥–∞—Ç—É.");
    info("- –í—ã –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–∏–º–∞–µ—Ç–µ ENTER –∏ –ø–æ–ª—É—á–∞–µ—Ç–µ —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ–º–∏–ª–ª–µ.");
    info("- –í—ã –≤–≤–æ–¥–∏—Ç–µ 'stop' –∏ —Å–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è.");

    while (true) {
        $input = trim(fgets($stdin));

        if (empty($input)) {
            info("Now => " . date2pm(time()) . "‚Ä∞");
            continue;
        }
        if (is_numeric($input) === false) {
            if (strcasecmp($input, "stop") === 0) {
                break;
            }
            error("–û–∂–∏–¥–∞–µ—Ç—Å—è —Ü–µ–ª–æ–µ –∏–ª–∏ –¥—Ä–æ–±–Ω–æ–µ —á–∏—Å–ª–æ.");
            continue;
        }
        $result = pm2date($input);
        info("$input => " . date("F j, Y, H:i:s", $result));
    }
}

function status($rawTokens) {
    $tokens = create_tokens($rawTokens);
    info("–°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω.");

    while (($count = count($tokens)) > 0) {
        $time = time();
        $year = (int) date('Y', $time);
        $pm = date2pm($time);
        $text = status_prepare_text($year, $pm);
        debug("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ ($count): $text");

        foreach ($tokens as $short => $token) {
            try {
                $token->request("status.set", [
                    "text" => $text
                ]);
            } catch (VkApiException $e) {
                if ($e->getCode() === 5 || $e->getCode() === 3610) {
                    $text = "–æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏";
                    unset($tokens[$short]);
                } else {
                    $text = "–Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ VK API";
                }
                error("$short: $text: $e");
            }
        }
        $next = pm2date($pm + 0.1);
        $nextSeconds = round($next - $time, 6);
        debug("–°—Ç–∞—Ç—É—Å—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã. –°–ª–µ–¥—É—é—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ $nextSeconds —Å–µ–∫...");

        if (time_sleep_until($next) === false) {
            break;
        }
    }
}

function create_tokens($rawTokens) {
    if (is_array($rawTokens) === false) {
        $rawTokens = explode(",", $rawTokens);
    }
    $tokens = [];

    foreach ($rawTokens as $token) {
        $key = substr($token, 0, 8) . '...'; // 4bf94b2b...
        $tokens[$key] = vk_api::create(trim($token), VERSION);
    }
    return $tokens;
}

function status_prepare_text($year, $pm) {
    $search = ["{year}", "{pm}"];
    $replacement = [$year, $pm];
    return str_replace($search, $replacement, STATUS_UPDATE_TEXT);
}
